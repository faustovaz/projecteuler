# *****************************************************************************
# * Project Euler - Problem 12
#
# The sequence of triangle numbers is generated by adding the natural numbers.
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first
# ten terms would be:
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
# Let us list the factors of the first seven triangle numbers:
#     1: 1
#     3: 1,3
#     6: 1,2,3,6
#    10: 1,2,5,10
#    15: 1,3,5,15
#    21: 1,3,7,21
#    28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.
# What is the value of the first triangle number to have over five hundred
# divisors?
# ****************************************************************************/

require_relative 'lib/refactoring.rb'
require 'set'

generator = lambda { |starting_sequence|
  Enumerator.new { |g|
    sequence = starting_sequence
    while true
      g.yield (sequence * (sequence + 1) / 2)
      sequence += 1
    end
  }
}

calculate = lambda { |triangular_number|
  factors = triangular_number.refactor
  (factors.size * factors.to_set.size ) < 500
}

calc = lambda { |generator|
  while calculate.call(generator.peek) do
    generator.next
  end
  generator.peek
}

p calc.call(generator.call(1))
